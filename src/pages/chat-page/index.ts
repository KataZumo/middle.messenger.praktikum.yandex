import Block from "../../tools/Block";
import ChatItem from "../../components/chat-item";
import Link from "../../components/link";
import "./chat-page.scss";
import ChatsAPI from "../../api/—ÅhatsAPI"
import { Button } from "../../components";
import —ÅhatsAPI from "../../api/—ÅhatsAPI";
interface ChatPageProps {
  currentChatName?: string;
  chats?: Array<ChatItem>;
}
interface ChatPageState {
  currentChatId: number | null;
}

export default class ChatPage extends Block {
  private state: ChatPageState;

  constructor(props: ChatPageProps = {}) {
    super({
      ...props,
      profileLink: new Link({
        text: '–ü—Ä–æ—Ñ–∏–ª—å',
        href: '/profile',
        className: 'chat-page__profile-link',
      }),
      createChatButton: new Button({
        text: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç',
        className: 'button create-chat-button',
        events: {
          click: (event: Event) => this.handleCreateChatClick(event),
        },
      }),
      deleteChatButton: new Button({
        text: '–£–¥–∞–ª–∏—Ç—å —á–∞—Ç',
        className: 'button delete-chat-button',
        events: {
          click: (event: Event) => this.handleDeleteChatClick(event),
        },
      }),
      chats: '',
    });

    this.state = {
      currentChatId: null,
    };

    this.initChats();
  }

  async initChats() {
    try {
      const chats = await ChatsAPI.getChats();
      console.log("üöÄ ~ ChatPage ~ initChats ~ chats:", chats)
      if (chats.length > 0) {
        const chatItems = chats.map(chat => {
          const chatItem = new ChatItem({
            id: chat.id,
            name: chat.title,
            message: chat.lastMessage || '–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
            avatar: chat.avatar,
            unread: chat.unreadMessages,
            current: false,
            events: {
              click: () => this.handleChatClick(chat.id),
            },
          }).render();
          return chatItem;
        });

        this.setProps({ chats: chatItems.join('') });
      } else {
        this.setProps({ chats: '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤</p>' });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤:', error);
      this.setProps({ chats: '<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤</p>' });
    }
  }

  getCurrentChatId(): number | null {
    return this.state.currentChatId;
  }

  handleChatClick(chatId: number) {
    this.state.currentChatId = chatId;
    this.setProps({ currentChatName: `–ß–∞—Ç ${chatId}` }); // –û–±–Ω–æ–≤–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  }

  handleCreateChatClick(event: Event) {
    event.preventDefault();

    const title = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞');

    if (title) {
      ChatsAPI.createChat({ title })
        .then((chat) => {
          if (chat && chat.id) {
            const chatTitle = chat.title ? chat.title : '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
            alert(`–ß–∞—Ç "${chatTitle}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID ${chat.id}!`);
            this.initChats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
          } else {
            alert('–ß–∞—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –µ–≥–æ ID –Ω–µ –ø–æ–ª—É—á–µ–Ω.');
          }
        })
        .catch(error => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞:', error);
        });
    } else {
      alert('–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }
  }

  handleDeleteChatClick(event: Event) {
    event.preventDefault();

    const chatId = this.getCurrentChatId();
    if (chatId) {
      ChatsAPI.deleteChat(chatId)
        .then(() => {
          alert(`–ß–∞—Ç —Å ID ${chatId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`);
          this.state.currentChatId = null; // –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
          this.initChats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        })
        .catch(error => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞:', error);
        });
    } else {
      alert('–ù–µ –≤—ã–±—Ä–∞–Ω —á–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    }
  }

  render(): string {
    return `
      <div class="chat-page">
        <div class="chat-page__sidebar">
          <div class="chat-page__sidebar-header">
            {{{profileLink}}}
            {{{createChatButton}}}
            {{{deleteChatButton}}}
            {{{addUserButton}}}
            <input type="text" placeholder="–ü–æ–∏—Å–∫" class="chat-page__search-input"/>
          </div>
          <div class="chat-page__chats">
            {{{chats}}} <!-- –í—Å—Ç–∞–≤–∫–∞ HTML —Å—Ç—Ä–æ–∫ —á–∞—Ç–æ–≤ -->
          </div>
        </div>
        <div class="chat-page__main">
          <div class="chat-page__header">
            <h2>{{currentChatName}}</h2>
          </div>
          <div class="chat-page__messages" id="messages">
          </div>
          <div class="chat-page__footer">
            <input type="text" id="message" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." />
            {{{sendMessage}}}
          </div>
        </div>
      </div>
    `;
  }
}




// async handleDeleteChatClick(event: Event) {
//   event.preventDefault();

//   const chatIdString = prompt('–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å');
//   const chatId = chatIdString ? parseInt(chatIdString, 10) : null;

//   if (chatId !== null && !isNaN(chatId)) {
//       const confirmation = confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–∞—Ç —Å ID ${chatId}?`);

//       if (confirmation) {
//           try {
//               await ChatsAPI.deleteChatWithData({ chatId });
//               alert(`–ß–∞—Ç —Å ID ${chatId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`);
//               this.initChats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
//           } catch (error) {
//               console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞:', error);
//               alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
//           }
//       }
//   } else {
//       alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
//   }
// }

// async handleAddUserToChatClick(event: Event) {
//   event.preventDefault();

//   const userIdString = prompt('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å');
//   const chatIdString = prompt('–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
//   const userId = userIdString ? parseInt(userIdString, 10) : null;
//   const chatId = chatIdString ? parseInt(chatIdString, 10) : null;

//   if (userId !== null && !isNaN(userId) && chatId !== null && !isNaN(chatId)) {
//     try {
//       await ChatsAPI.addUsersToChat({ users: [userId], chatId });
//       alert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç —Å ID ${chatId}!`);
//       this.initChats(); // –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
//     } catch (error) {
//       console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç:', error);
//       alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
//     }
//   } else {
//     alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
//   }
// }


// deleteChatButton: new Button({
//   text: '–£–¥–∞–ª–∏—Ç—å —á–∞—Ç',
//   className: 'button create-chat-button',
//   events: {
//     click: (event: Event) => this.handleDeleteChatClick(event),
//   },
// }),
// addUserButton: new Button({
//   text: '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
//   className: 'button add-user-button',
//   events: {
//     click: (event: Event) => this.handleAddUserToChatClick(event),
//   },
// }),
