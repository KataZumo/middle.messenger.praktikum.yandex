import Block from "../../tools/Block";
import "./input.scss";
interface InputProps {
  type: string;
  className?: string;
  events?: {
    change?: (event: Event) => void;
    blur?: (event: Event) => void;
  };
  onChange: (value: string) => void;
  value?: string;
  placeholder?: string;
}
export default class InputComponent extends Block {
  constructor(props: InputProps) {
    super({
      ...props,
      events: {
        change: (e: Event) => {
          const inputElement = e.target as HTMLInputElement;
          props.onChange(inputElement.value);
          this.validate();
        },
        blur: () => this.validate(),
      },
    });
  }

  render() {
    return `
      <div class="input">
        <input
          type="{{type}}"
          class="input__element{{#if isInvalid}} input__element--invalid{{/if}}"
          value="{{value}}"
          placeholder="{{placeholder}}"
        />
        <div class="input__error-message">{{errorMessage}}</div>
      </div>
    `;
  }

  validate() {
    const content = this.getContent();
    if (!content) {
      console.error("–ü–æ–ª—è –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏");
      return false;
    }

    const inputElement = content.querySelector('input') as HTMLInputElement;
    if (!inputElement) {
      return false;
    }

    const value = inputElement.value;
    console.log("üöÄ ~ InputComponent ~ validate ~ value:", value)
    const type = inputElement.type;
    const errorMessageElement = content.querySelector('.input__error-message') as HTMLElement;

    if (!errorMessageElement) {
      return false;
    }

    let isValid = false;
    let errorMessage = '';
    switch (type) {
      case "text":
        // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã (–ª–∞—Ç–∏–Ω—Å–∫–æ–π –∏–ª–∏ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–π).
        // –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (–∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ, –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ) –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∏–ª–∏ 
        // –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ –¥–µ—Ñ–∏—Å—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã.
        // –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–∫—Ä–æ–º–µ –¥–µ—Ñ–∏—Å–∞) –∏ –¥—Ä—É–≥–∏—Ö –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
        isValid = this.validateText(value);
        errorMessage = isValid ? '' : 'Invalid text';
        break;
      case "login":
        // –°–æ—Å—Ç–æ–∏—Ç –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ (–∑–∞–≥–ª–∞–≤–Ω—ã—Ö –∏–ª–∏ —Å—Ç—Ä–æ—á–Ω—ã—Ö), —Ü–∏—Ñ—Ä, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π –∏ –¥–µ—Ñ–∏—Å–æ–≤.
        // –ò–º–µ–µ—Ç –¥–ª–∏–Ω—É –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤.
        // –°–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ª–∞—Ç–∏–Ω—Å–∫—É—é –±—É–∫–≤—É (—Å—Ç—Ä–æ—á–Ω—É—é –∏–ª–∏ –∑–∞–≥–ª–∞–≤–Ω—É—é).
        isValid = this.validateLogin(value);
        errorMessage = isValid ? '' : '–ù–µ –≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
        break;
      case "email":
        isValid = this.validateEmail(value);
        errorMessage = isValid ? '' : '–ù–µ –≤–µ—Ä–Ω—ã–π emain';
        break;
      case "password":
        isValid = this.validatePassword(value);
        errorMessage = isValid ? '' : '–ù–µ –≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
        break;
      case "phone":
        isValid = this.validatePhone(value);
        errorMessage = isValid ? '' : '–ù–µ –≤–µ—Ä–Ω—ã–π –Ω–∞–±—Ä–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
        break;
      default:
        console.error("Unknown validation type");
        return false;
    }

    if (!isValid) {
      errorMessageElement.textContent = errorMessage;
      inputElement.classList.add('input__element--invalid');
      console.error(`–≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –ø—Ä–æ—à–ª–∞ –¥–ª—è: ${type}`);
      return false;
    }

    errorMessageElement.textContent = '';
    inputElement.classList.remove('input__element--invalid');
    return true;
  }

  validateText(value: string): boolean {
    const textRegex = /^[A-Z–ê-–Ø][a-z–∞-—èA-Z–ê-–Ø-]*$/;
    return textRegex.test(value);
  }

  validateLogin(value: string): boolean {
    const loginRegex = /^(?=.*[a-zA-Z])[a-zA-Z0-9_-]{3,20}$/;
    return loginRegex.test(value);
    return true;
  }

  validateEmail(value: string): boolean {
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return emailRegex.test(value);
    return true;
  }

  validatePassword(value: string): boolean {
    const passwordRegex = /^(?=.*[A-Z])(?=.*\d)[A-Za-z\d]{8,40}$/;
    return passwordRegex.test(value);
  }

  validatePhone(value: string): boolean {
    const phoneRegex = /^\+?\d{10,15}$/;
    return phoneRegex.test(value);
  }

  getValue(): string {
    const inputElement = this.element?.querySelector('input');
    if (inputElement) {
      return inputElement.value;
    }
    return '';
  }

}
